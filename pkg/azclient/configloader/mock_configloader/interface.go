// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cloud-provider-azure/pkg/azclient/configloader (interfaces: FactoryConfigLoader,AuthConfigLoader)

// Package mock_configloader is a generated GoMock package.
package mock_configloader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	azclient "sigs.k8s.io/cloud-provider-azure/pkg/azclient"
)

// MockFactoryConfigLoader is a mock of FactoryConfigLoader interface.
type MockFactoryConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryConfigLoaderMockRecorder
}

// MockFactoryConfigLoaderMockRecorder is the mock recorder for MockFactoryConfigLoader.
type MockFactoryConfigLoaderMockRecorder struct {
	mock *MockFactoryConfigLoader
}

// NewMockFactoryConfigLoader creates a new mock instance.
func NewMockFactoryConfigLoader(ctrl *gomock.Controller) *MockFactoryConfigLoader {
	mock := &MockFactoryConfigLoader{ctrl: ctrl}
	mock.recorder = &MockFactoryConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryConfigLoader) EXPECT() *MockFactoryConfigLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockFactoryConfigLoader) Load(arg0 context.Context) (*azclient.ClientFactoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*azclient.ClientFactoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockFactoryConfigLoaderMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFactoryConfigLoader)(nil).Load), arg0)
}

// MockAuthConfigLoader is a mock of AuthConfigLoader interface.
type MockAuthConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigLoaderMockRecorder
}

// MockAuthConfigLoaderMockRecorder is the mock recorder for MockAuthConfigLoader.
type MockAuthConfigLoaderMockRecorder struct {
	mock *MockAuthConfigLoader
}

// NewMockAuthConfigLoader creates a new mock instance.
func NewMockAuthConfigLoader(ctrl *gomock.Controller) *MockAuthConfigLoader {
	mock := &MockAuthConfigLoader{ctrl: ctrl}
	mock.recorder = &MockAuthConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfigLoader) EXPECT() *MockAuthConfigLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockAuthConfigLoader) Load(arg0 context.Context) (*azclient.AzureAuthConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*azclient.AzureAuthConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockAuthConfigLoaderMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockAuthConfigLoader)(nil).Load), arg0)
}
