// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by client-gen. DO NOT EDIT.
package azclient

import (
	"strings"
	"sync"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"

	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/availabilitysetclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/deploymentclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/diskclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/interfaceclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/loadbalancerclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/managedclusterclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/policy/ratelimit"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/privateendpointclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/privatelinkserviceclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/privatezoneclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/publicipaddressclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/publicipprefixclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/routetableclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/securitygroupclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/snapshotclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/subnetclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/virtualmachineclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/virtualmachinescalesetclient"
	"sigs.k8s.io/cloud-provider-azure/pkg/azclient/virtualmachinescalesetvmclient"
)

type ClientFactoryImpl struct {
	*ClientFactoryConfig
	cred                                            azcore.TokenCredential
	availabilitysetclientInterfaceRegistry          sync.Map
	deploymentclientInterfaceRegistry               sync.Map
	diskclientInterfaceRegistry                     sync.Map
	interfaceclientInterfaceRegistry                sync.Map
	loadbalancerclientInterfaceRegistry             sync.Map
	managedclusterclientInterfaceRegistry           sync.Map
	privateendpointclientInterfaceRegistry          sync.Map
	privatelinkserviceclientInterfaceRegistry       sync.Map
	privatezoneclientInterfaceRegistry              sync.Map
	publicipaddressclientInterfaceRegistry          sync.Map
	publicipprefixclientInterfaceRegistry           sync.Map
	routetableclientInterfaceRegistry               sync.Map
	securitygroupclientInterfaceRegistry            sync.Map
	snapshotclientInterfaceRegistry                 sync.Map
	subnetclientInterfaceRegistry                   sync.Map
	virtualmachineclientInterfaceRegistry           sync.Map
	virtualmachinescalesetclientInterfaceRegistry   sync.Map
	virtualmachinescalesetvmclientInterfaceRegistry sync.Map
}

func NewClientFactory(config *ClientFactoryConfig, cred azcore.TokenCredential) ClientFactory {
	if config == nil {
		config = &ClientFactoryConfig{}
	}
	if cred == nil {
		cred = &azidentity.DefaultAzureCredential{}
	}
	return &ClientFactoryImpl{
		ClientFactoryConfig: config,
		cred:                cred,
	}
}

func (factory *ClientFactoryImpl) GetavailabilitysetclientInterface(subscription string) (availabilitysetclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("availabilitySetRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := availabilitysetclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.availabilitysetclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*availabilitysetclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetdeploymentclientInterface(subscription string) (deploymentclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("deploymentRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := deploymentclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.deploymentclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*deploymentclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetdiskclientInterface(subscription string) (diskclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("diskRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := diskclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.diskclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*diskclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetinterfaceclientInterface(subscription string) (interfaceclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("interfaceRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := interfaceclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.interfaceclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*interfaceclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetloadbalancerclientInterface(subscription string) (loadbalancerclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("loadBalancerRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := loadbalancerclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.loadbalancerclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*loadbalancerclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetmanagedclusterclientInterface(subscription string) (managedclusterclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("containerServiceRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := managedclusterclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.managedclusterclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*managedclusterclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetprivateendpointclientInterface(subscription string) (privateendpointclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("privateEndpointRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := privateendpointclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.privateendpointclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*privateendpointclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetprivatelinkserviceclientInterface(subscription string) (privatelinkserviceclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("privateLinkServiceRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := privatelinkserviceclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.privatelinkserviceclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*privatelinkserviceclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetprivatezoneclientInterface(subscription string) (privatezoneclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("privateDNSRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := privatezoneclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.privatezoneclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*privatezoneclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetpublicipaddressclientInterface(subscription string) (publicipaddressclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("publicIPAddressRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := publicipaddressclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.publicipaddressclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*publicipaddressclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetpublicipprefixclientInterface(subscription string) (publicipprefixclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}

	defaultClient, err := publicipprefixclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.publicipprefixclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*publicipprefixclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetroutetableclientInterface(subscription string) (routetableclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("routeTableRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := routetableclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.routetableclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*routetableclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetsecuritygroupclientInterface(subscription string) (securitygroupclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("securityGroupRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := securitygroupclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.securitygroupclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*securitygroupclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetsnapshotclientInterface(subscription string) (snapshotclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("snapshotRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := snapshotclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.snapshotclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*snapshotclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetsubnetclientInterface(subscription string) (subnetclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("subnetsRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := subnetclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.subnetclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*subnetclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetvirtualmachineclientInterface(subscription string) (virtualmachineclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("virtualMachineRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := virtualmachineclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.virtualmachineclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*virtualmachineclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetvirtualmachinescalesetclientInterface(subscription string) (virtualmachinescalesetclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}
	//add ratelimit policy
	ratelimitOption := factory.ClientFactoryConfig.GetRateLimitConfig("virtualMachineSizesRateLimit")
	rateLimitPolicy := ratelimit.NewRateLimitPolicy(ratelimitOption)
	options.ClientOptions.PerCallPolicies = append(options.ClientOptions.PerCallPolicies, rateLimitPolicy)
	defaultClient, err := virtualmachinescalesetclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.virtualmachinescalesetclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*virtualmachinescalesetclient.Interface), nil
}

func (factory *ClientFactoryImpl) GetvirtualmachinescalesetvmclientInterface(subscription string) (virtualmachinescalesetvmclient.Interface, error) {
	subID := strings.ToLower(subscription)

	options, err := GetDefaultResourceClientOption(factory.ClientFactoryConfig)
	if err != nil {
		return nil, err
	}

	defaultClient, err := virtualmachinescalesetvmclient.New(subscription, factory.cred, options)
	if err != nil {
		return nil, err
	}
	client, _ := factory.virtualmachinescalesetvmclientInterfaceRegistry.LoadOrStore(subID, &defaultClient)

	return *client.(*virtualmachinescalesetvmclient.Interface), nil
}
