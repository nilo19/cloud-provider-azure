// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package generator

import (
	"bufio"
	"bytes"
	"fmt"
	"io"

	"sigs.k8s.io/controller-tools/pkg/genall"
	"sigs.k8s.io/controller-tools/pkg/loader"
)

func WriteToFile(ctx *genall.GenerationContext, root *loader.Package, fileName string, headerText string, importList map[string]map[string]struct{}, codeSnips []*bytes.Buffer) error {
	outContent := new(bytes.Buffer)

	var importStatement bytes.Buffer
	importWriter := bufio.NewWriter(&importStatement)
	for packageName, alias := range importList {
		if len(alias) == 0 {
			if err := ImportTemplate.Execute(importWriter, &ImportStatement{Alias: "", Package: packageName}); err != nil {
				return err
			}
		}
		for item := range alias {
			if err := ImportTemplate.Execute(importWriter, &ImportStatement{Alias: item, Package: packageName}); err != nil {
				return err
			}
		}
	}
	importWriter.Flush()
	_, err := fmt.Fprintf(outContent, `
%[3]s
// Code generated by client-gen. DO NOT EDIT.
package %[1]s
import (
  %[2]s
)
`, root.Name, importStatement.String(), headerText)
	if err != nil {
		return err
	}

	for _, codeSnip := range codeSnips {
		if _, err := io.Copy(outContent, bufio.NewReader(codeSnip)); err != nil {
			return err
		}
	}

	rawBytes := outContent.Bytes()
	outputFile, err := ctx.Open(root, fileName)
	if err != nil {
		return err
	}
	defer outputFile.Close()
	n, err := outputFile.Write(rawBytes)
	if err != nil {
		return err
	}
	if n < len(rawBytes) {
		return io.ErrShortWrite
	}
	return nil
}
